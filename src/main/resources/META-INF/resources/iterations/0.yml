---
openapi: 3.0.3
info:
  title: CoolAssur Application
  description: Cette Api permet d'interagir avec l'application coolAssur
  contact:
    name: cool Assur fake contact
    url: https://cool.assur
    email: support@example.com
  version: "1.0"
servers:
  - url: https://uat-france.apis.allianz.com/aq/formation/coolassur
    description: uat avec ApiGee
  - url: /
    description: local
  - url: https://recette-host
    description: recette
  - url: https://prod-host
    description: prod
  - url: https://coolassur.adho.fr
    description: uat sans ApiGee
tags:
  - name: Gestion des contrats
    description: tout ce qui touche aux contrats
  - name: Gestion des utilisateur
    description: une ressource pour les utilisateurs de l'application
paths:
  /authenticate:
    get:
      tags:
        - Gestion des utilisateur
      summary: Authentifie et recupère un nouveau jeton jwt de l'utilisateur connecté
      responses:
        "200":
          description: liste réussie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
  /v1/contracts:
    get:
      tags:
        - Gestion des contrats
      summary: liste les contrats
      parameters:
        - name: limit
          in: query
          description: "nombre max d’élément dans la liste, default 20"
          schema:
            format: int32
            type: integer
          example: 20
        - name: numbers
          in: query
          schema:
            type: string
        - name: offset
          in: query
          description: "débuter la liste à cette valeur offset, default 0"
          schema:
            format: int32
            type: integer
          example: 0
        - name: query
          in: query
          description: Recherche plain text
          schema:
            type: string
          example: c1 big risk
        - name: sortBy
          in: query
          description: "trier la liste sur un champ, defaut 'asc(number)'"
          schema:
            type: string
        - name: status
          in: query
          description: filtrer par status
          schema:
            type: string
      responses:
        "200":
          description: liste avec succes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contract'
      security:
        - CoolAssurAuthentication: [ ]
  /v1/users/me:
    get:
      tags:
        - Gestion des utilisateur
      summary: Information sur l'utilisateur connecté
      responses:
        "200":
          description: liste réussie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
        - CoolAssurAuthentication: [ ]
  /q/health:
    summary: MicroProfile Health provides a way for your application to distribute
      information about its healthiness state to state whether or not it is able to
      function properly
    description: MicroProfile Health Endpoint
    get:
      tags:
        - MicroProfile Health
      summary: "An aggregated view of the Liveness, Readiness and Startup of this\
        \ application"
      description: Check the health of the application
      operationId: microprofile_health_root
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'
  /q/health/live:
    summary: Liveness checks are utilized to tell whether the application should be
      restarted
    description: MicroProfile Health - Liveness Endpoint
    get:
      tags:
        - MicroProfile Health
      summary: The Liveness check of this application
      description: Check the liveness of the application
      operationId: microprofile_health_liveness
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'
  /q/health/ready:
    summary: Readiness checks are used to tell whether the application is able to
      process requests
    description: MicroProfile Health - Readiness Endpoint
    get:
      tags:
        - MicroProfile Health
      summary: The Readiness check of this application
      description: Check the readiness of the application
      operationId: microprofile_health_readiness
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'
  /q/health/started:
    summary: Startup checks are an used to tell when the application has started
    description: MicroProfile Health - Startup Endpoint
    get:
      tags:
        - MicroProfile Health
      summary: The Startup check of this application
      description: Check the startup of the application
      operationId: microprofile_health_startup
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'
components:
  schemas:
    Contract:
      type: object
      properties:
        number:
          type: string
        risk:
          type: string
        status:
          type: string
        personId:
          format: int32
          type: integer
        premiums:
          type: array
          items:
            $ref: '#/components/schemas/Premium'
        payments:
          type: array
          items:
            $ref: '#/components/schemas/Payment'
    Payment:
      type: object
      properties:
        amount:
          format: float
          type: number
        type:
          type: string
        date:
          type: string
    Person:
      type: object
      properties:
        address:
          type: string
        firstName:
          type: string
        job:
          type: string
        lastName:
          type: string
        mail:
          type: string
        nationality:
          type: string
        phone:
          type: string
        id:
          format: int32
          type: integer
    Premium:
      type: object
      properties:
        amount:
          format: float
          type: number
        dueDate:
          type: string
    Token:
      type: object
      properties:
        token:
          type: string
    User:
      type: object
      properties:
        firstName:
          type: string
        job:
          type: string
        lastName:
          type: string
        mail:
          type: string
    HealthCheckResponse:
      type: object
      properties:
        data:
          type: object
          nullable: true
        name:
          type: string
        status:
          $ref: '#/components/schemas/HealthCheckStatus'
    HealthCheckStatus:
      enum:
        - DOWN
        - UP
      type: string
  securitySchemes:
    CoolAssurAuthentication:
      type: apiKey
      description: Authentication with APIKEY token in header
      name: token
      in: header
